/* =======
Variables
========== */

:root {
    --document-bg-color: #f0f0ee;
    --document-text-color: rgb(22 21 21);
}

/* =======
Resets
========== */

*,
*::after,
*::before {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

h1,
p,
a,
input,
label,
button {
    font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
    color: var(--document-text-color);
}

p {
    line-height: 100%;
}

a {
    --text-color: rgb(117, 90, 226);
    --hover-text-color: rgb(38, 22, 128);
    color: var(--text-color);
    transition: .3s color;

    &:hover {
        color: var(--hover-text-color);
    }
}

a[target="_blank"] {
    &::after {
        content: "asdasdad";
        display: inline-block;
        vertical-align: baseline;
        text-decoration: underline;

        height: 1em;
        width: 1em;

        transition: .3s background;
        background: var(--text-color);
        mask-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cg fill='none'%3E%3Cpath d='m12.593 23.258l-.011.002l-.071.035l-.02.004l-.014-.004l-.071-.035q-.016-.005-.024.005l-.004.01l-.017.428l.005.02l.01.013l.104.074l.015.004l.012-.004l.104-.074l.012-.016l.004-.017l-.017-.427q-.004-.016-.017-.018m.265-.113l-.013.002l-.185.093l-.01.01l-.003.011l.018.43l.005.012l.008.007l.201.093q.019.005.029-.008l.004-.014l-.034-.614q-.005-.018-.02-.022m-.715.002a.02.02 0 0 0-.027.006l-.006.014l-.034.614q.001.018.017.024l.015-.002l.201-.093l.01-.008l.004-.011l.017-.43l-.003-.012l-.01-.01z'/%3E%3Cpath fill='%23000' d='M11 6a1 1 0 1 1 0 2H5v11h11v-6a1 1 0 1 1 2 0v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2zm9-3a1 1 0 0 1 1 1v5a1 1 0 1 1-2 0V6.414l-8.293 8.293a1 1 0 0 1-1.414-1.414L17.586 5H15a1 1 0 1 1 0-2Z'/%3E%3C/g%3E%3C/svg%3E");
        text-decoration: underline;
    }

    &:hover::after {
        background: var(--hover-text-color);
    }
}

html {
    /* https://stackoverflow.com/a/7049918/12637568 */
    height: 100vh;
}

h1 {
    text-align: center;
}

body {
    display: grid;
    grid: 1fr auto / auto;

    align-items: start;
    justify-content: center;

    background: var(--document-bg-color);
    padding: 1rem;

    height: 100vh;

    transition: .9s background;
    
    overflow: hidden; /* hide notifications that animate outside of the body */
}

*::selection {
    background-color: var(--document-text-color);
    color: var(--document-bg-color);
}

/*dddddddddddddddddd*/


/* =======
Page content
========== */

.main-content {
    display: grid;
    align-content: center;
}

#game-form {
    display: grid;
    grid: 1fr / auto-flow;
    align-items: center;
    gap: 1rem;

    #guess-input {
        padding: .5rem;
        font-size: 1em;
        height: 3em;

        transition: .3s border, .3s background;
    }
}

/* =======
Toast
========== */

[popover]::backdrop {
    display: none;
}

.toast {
    border-radius: 6px;
    padding: .5rem 1rem;
    min-width: 10rem;
    border: 1px solid grey;
    box-shadow: 0px 0px 2px #00000059;
    line-height: 100%;

    /* first toast is positioned absolutely to the bottom right of the screen */
    position: absolute;
    /* popovers set inset to 0, so we must reset top/left to auto */
    inset: auto 1rem 1rem auto;
    animation: toast-show .6s ease-in-out 1 forwards;
    transition: .3s ease-out inset-block-end, .3s ease-out inset-inline-end;

    /* if we mess with the popover element's display property, show and hide behavior will have indeterminate & non-functional behavior. use a wrapper to layout a popover's children: */
    .grid-wrapper {
        display: grid;
        grid: auto / auto auto;
        align-items: center;
        gap: 1rem;
    }

    .btn--toast {
        justify-self: end;
        padding: .5rem;
    }
}

.toast.closing {
    animation: toast-hide 1s ease-in-out 1 forwards;
}



/* =======
Buttons
========== */

.btn {
    border: 1px solid grey;
    padding: .5rem 1rem;
    font-weight: 500;
    border-radius: 6px;
    cursor: pointer;
    width: fit-content;
    /* don't stretch via justify-self default if a grid child */

    transition: .3s background;
}

.btn--success {
    border: 1px solid rgb(31, 93, 38);
    background: rgb(115, 193, 115);

    &:hover {
        background: rgb(100, 186, 100);
    }
}

.btn--toast {
    border: none;
    border-radius: 50%;

    /* fix the size of the button irregardless of its contents */
    width: 2rem;
    aspect-ratio: 1 / 1;

    background:
        no-repeat center / 50% 50% url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='none' stroke='white' stroke-linecap='round' stroke-width='2' d='M20 20L4 4m16 0L4 20'/%3E%3C/svg%3E");

    background-color: rgb(43, 43, 43);

    display: grid;
    grid: 100% / 100%;
    place-items: center;
    /* why do the default grid tracks not fill to 100%? */

    &:hover {
        background-color: rgb(14, 13, 13);
    }
}

#btn--new-game {
    margin-top: 1rem;
    justify-self: center;
}

/* =======
New Popover Button Variables
========== */

@property --btn-linear-color1 {
    syntax: '<color>';
    initial-value: rgb(255, 255, 255);
    inherits: false;
}

@property --btn-linear-color2 {
    syntax: '<color>';
    initial-value: rgb(228 228 228);
    inherits: false;
}

#btn--new-popover {
    transition: 1s --btn-linear-color2, 1s --btn-linear-color1;
    background: linear-gradient(var(--btn-linear-color1), var(--btn-linear-color2));
    &:hover {
        --btn-linear-color1: rgb(255, 255, 255);
        --btn-linear-color2: rgb(210 210 210);
    }
}

/* =======
Notification animations
========== */

@keyframes toast-show {
    from {
        transform: translate(5rem, 3.5rem);
    }
    50% {
        transform: translate(-1rem, -1rem);
    }
    75% {
        transform: translate(.5rem, .5rem);
    }
    to {
      
        transform: translate(0, 0);
    }
}


@keyframes toast-hide {
    from {
        transform: translate(0, 0);
    }
    50% {
        transform: translate(-3rem, 0);
    }
    75% {
        transform: translate(-3rem, 0);
    }
    to {
        transform: translate(50vw, 0);
    }
}

/* =======
Utilities
========== */

.sr-only {
    position: absolute;
    left: -99999px;
}

.hidden {
    display: none;
}

.text-center {
    text-align: center;
}

.bg-success {
    background: #45be5e;
}

.bg-danger {
    background: #b85563;
}